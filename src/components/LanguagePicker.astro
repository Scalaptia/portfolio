---
import { languages } from '@/i18n/ui';
import { getLangFromUrl, useTranslations, useTranslatedPath } from '@/i18n/utils';
import { ChevronDown } from 'lucide-react';

const currentLang = getLangFromUrl(Astro.url);
const currentLabel = languages[currentLang];

const currentPath = Astro.url;
const lang = getLangFromUrl(currentPath);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);
---

<div class="relative group" id="language-picker">
    <button 
        class="flex items-center gap-2 px-4 py-1 text-text font-ubuntu-mono font-bold border-2 border-text bg-white shadow-[2px_2px_0px_0px_rgba(65,44,71,1)] transition-all min-w-[8ch]"
        aria-expanded="false"
        aria-controls="language-dropdown"
    >
        {currentLabel} <span class="dropdown-arrow">
            <ChevronDown size={16} />
        </span>
    </button>

    <ul 
        id="language-dropdown"
        class="absolute right-0 z-50 min-w-[8ch] mt-2 bg-white opacity-0 invisible transition-all duration-200"
    >
        {Object.entries(languages).filter(([lang]) => lang !== currentLang).map(([lang, label]) => (
            <li class="border-2 border-text shadow-[2px_2px_0px_0px_rgba(65,44,71,1)] mb-1 last:mb-0">
                <a 
                    href={translatePath(currentPath.pathname, lang)}
                    class="block px-4 py-1 text-text font-ubuntu-mono font-bold transition-all hover:bg-gray-100"
                >
                    {label}
                </a>
            </li>
        ))}
    </ul>
</div>

<style>
    .dropdown-active {
        opacity: 1 !important;
        visibility: visible !important;
    }

    .arrow-up {
        transform: rotate(180deg);
    }
</style>

<script>
    const picker = document.getElementById('language-picker');
    const button = picker?.querySelector('button');
    const dropdown = document.getElementById('language-dropdown');
    const arrow = picker?.querySelector('.dropdown-arrow');

    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
        if (!picker?.contains(e.target as Node)) {
            dropdown?.classList.remove('dropdown-active');
            arrow?.classList.remove('arrow-up');
            button?.setAttribute('aria-expanded', 'false');
        }
    });

    // Toggle dropdown on button click
    button?.addEventListener('click', (e) => {
        e.stopPropagation();
        const isExpanded = button.getAttribute('aria-expanded') === 'true';
        
        dropdown?.classList.toggle('dropdown-active');
        arrow?.classList.toggle('arrow-up');
        button.setAttribute('aria-expanded', (!isExpanded).toString());
    });
</script>