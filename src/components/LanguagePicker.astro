---
import { languages } from "@/i18n/ui";
import {
  getLangFromUrl,
  useTranslations,
  useTranslatedPath,
} from "@/i18n/utils";
import { ChevronDown } from "lucide-react";

const currentLang = getLangFromUrl(Astro.url);
const currentLabel = languages[currentLang];

const currentPath = Astro.url;
const lang = getLangFromUrl(currentPath);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);
---

<div class="relative">
  <button
    id="language-picker-btn"
    class="flex items-center gap-2 px-3 py-1 md:px-4 text-text font-ubuntu-mono font-bold border-2 border-text bg-white shadow-[2px_2px_0px_0px_rgba(65,44,71,1)] transition-all duration-150 hover:shadow-[1px_1px_0px_0px_rgba(65,44,71,1)] hover:translate-x-[1px] hover:translate-y-[1px] min-w-[6ch] md:min-w-[8ch] text-sm md:text-base cursor-pointer"
    type="button"
  >
    {currentLabel}
    <span id="dropdown-arrow" class="transition-transform duration-200">
      <ChevronDown size={14} className="md:size-4" />
    </span>
  </button>

  <ul
    id="language-dropdown"
    class="absolute right-0 z-[60] min-w-[6ch] lg:min-w-[8ch] mt-2 bg-white border-2 border-text shadow-[2px_2px_0px_0px_rgba(65,44,71,1)] opacity-0 invisible transform translate-y-2 transition-all duration-200"
  >
    {
      Object.entries(languages)
        .filter(([lang]) => lang !== currentLang)
        .map(([lang, label]) => (
          <li>
            <a
              href={translatePath(currentPath.pathname, lang)}
              class="block px-3 py-1 lg:px-4 lg:py-2 text-text font-ubuntu-mono font-bold transition-all duration-150 hover:bg-primary/10 hover:text-primary text-sm lg:text-base border-b border-text/20 last:border-b-0"
            >
              {label}
            </a>
          </li>
        ))
    }
  </ul>
</div>

<script is:inline>
  function initLanguageDropdown() {
    const button = document.getElementById("language-picker-btn");
    const dropdown = document.getElementById("language-dropdown");
    const arrow = document.getElementById("dropdown-arrow");

    if (!button || !dropdown || !arrow) {
      return;
    }

    let isOpen = false;

    function toggleDropdown() {
      isOpen = !isOpen;

      if (isOpen) {
        dropdown.style.opacity = "1";
        dropdown.style.visibility = "visible";
        dropdown.style.transform = "translateY(0)";
        arrow.style.transform = "rotate(180deg)";
      } else {
        dropdown.style.opacity = "0";
        dropdown.style.visibility = "hidden";
        dropdown.style.transform = "translateY(8px)";
        arrow.style.transform = "rotate(0deg)";
      }
    }

    function closeDropdown() {
      if (isOpen) {
        isOpen = false;
        dropdown.style.opacity = "0";
        dropdown.style.visibility = "hidden";
        dropdown.style.transform = "translateY(8px)";
        arrow.style.transform = "rotate(0deg)";
      }
    }

    button.addEventListener("click", function (e) {
      e.preventDefault();
      e.stopPropagation();
      toggleDropdown();
    });

    document.addEventListener("click", function (e) {
      if (!button.contains(e.target) && !dropdown.contains(e.target)) {
        closeDropdown();
      }
    });
  }

  // Initialize immediately if DOM is ready, or wait for it
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initLanguageDropdown);
  } else {
    initLanguageDropdown();
  }
</script>
